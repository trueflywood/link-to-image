{"version":3,"sources":["../../../src/directives/link-toimage-icon/link-toimage-icon.ts"],"names":[],"mappings":"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","file":"link-toimage-icon.js","sourceRoot":"","sourcesContent":["import {\r\n    Directive, ElementRef, Input,\r\n    Renderer2\r\n}                                       from '@angular/core';\r\n\r\n/**\r\n * Дериктива заменяющая ссылку на иконку\r\n * Необходим Font Awesome версии 4.1 или позднее\r\n */\r\n\r\nexport class LinkToimageIconDirective {\r\n     text: string;\r\n\r\n    constructor(private element: ElementRef, private render: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.changeText();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        console.log('ngOnChanges');\r\n        this.changeText();\r\n    }\r\n\r\n    changeText() {\r\n        if(this.isLink()) {\r\n            (<HTMLElement>this.element.nativeElement).innerText = '';\r\n            let regExpArh = /(\\.rar|\\.zip|\\.7z)$/i;\r\n            let regExpPdf = /(\\.pdf)$/i;\r\n            let regExpWord = /(\\.doc|\\.docx)$/i;\r\n            let regExpExcel = /(\\.xls|\\.xlsx)$/i;\r\n            let regExpTxt = /(\\.txt)$/i;\r\n            let regExpImg = /(\\.png|\\.jpg|\\.bmp|\\.gif)$/i;\r\n\r\n            switch(true) {\r\n                case (regExpArh.test(this.text)):\r\n                    this.setIcon('fa-file-archive-o');\r\n                    break;\r\n                case (regExpPdf.test(this.text)):\r\n                    this.setIcon('fa-file-pdf-o');\r\n                    break;\r\n                case (regExpWord.test(this.text)):\r\n                    this.setIcon('fa-file-word-o');\r\n                    break;\r\n                case (regExpExcel.test(this.text)):\r\n                    this.setIcon('fa-file-excel-o');\r\n                    break;\r\n                case (regExpTxt.test(this.text)):\r\n                    this.setIcon('fa-file-text-o');\r\n                    break;\r\n                case (regExpImg.test(this.text)):\r\n                     (<HTMLElement>this.element.nativeElement).innerHTML = '<img src=\"' + this.text + '\" style=\"width: 100%; height: auto\">';\r\n                    break;\r\n                default:\r\n                    (<HTMLElement>this.element.nativeElement).innerHTML = '<span style=\"text-decoration: underline; color: #15c\">' + this.text + '</span>';\r\n                    break;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    isLink(): boolean {\r\n        let regExpUrl = /^http(s)?\\:\\/\\//i;\r\n        return regExpUrl.test(this.text);\r\n    }\r\n\r\n    setIcon(iconStyle: string) {\r\n        this.render.setStyle(this.element.nativeElement, 'display', 'flex');\r\n        this.render.setStyle(this.element.nativeElement, 'flex-direction', 'row');\r\n        (<HTMLElement>this.element.nativeElement).innerHTML = '<i class=\"fa ' + iconStyle + '\" aria-hidden=\"true\" style=\"font-size: 1.5em; padding-right: 0.5em\"></i>' +\r\n            ' <div style=\"overflow-wrap: break-word; width: 100%;  padding-right: 2em;\">' + this.text + '</div>';\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[link-toimage-icon]' // Attribute selector\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'text': [{ type: Input, args: ['link-toimage-icon', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}